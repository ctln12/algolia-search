{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["searchClient","algoliasearch","index","initIndex","fetch","then","response","json","talks","saveObjects","autoGenerateObjectIDIfNotExist","App","InstantSearch","indexName","id","className","Panel","header","RefinementList","attribute","SearchBox","translations","placeholder","Hits","hitComponent","hit","name","speakers","src","image_url","alt","Pagination","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0TAKMA,G,MAAeC,IAAc,aAAc,qCAE3CC,EAAQF,EAAaG,UAAU,SAErCC,MACE,iFAECC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUG,GACd,OAAON,EAAMO,YAAYD,EAAO,CAC9BE,gCAAgC,OA6CvBC,MAzCf,WAYE,OACE,kBAACC,EAAA,EAAD,CAAeZ,aAAcA,EAAca,UAAU,SACnD,wBAAIC,GAAG,SAAQ,qCAAf,UACA,yBAAKC,UAAU,WACb,yBAAKA,UAAU,cACb,yBAAKD,GAAG,cACL,kBAACE,EAAA,EAAD,CAAOC,OAAO,QACb,kBAACC,EAAA,EAAD,CACEC,UAAU,YAKlB,yBAAKJ,UAAU,eACb,yBAAKD,GAAG,aACL,kBAACM,EAAA,EAAD,CAAWC,aAAc,CAAEC,YAAa,sBAE3C,yBAAKR,GAAG,QACL,kBAACS,EAAA,EAAD,CAAMC,aA5BL,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OACE,yBAAKV,UAAU,OACb,wBAAIA,UAAU,aAAaU,EAAIC,MACnC,uBAAGX,UAAU,eAAeU,EAAIE,SAAS,IACrC,yBAAKZ,UAAU,YAAYa,IAAKH,EAAII,UAAWC,IAAI,UAyBjD,yBAAKhB,GAAG,cACL,kBAACiB,EAAA,EAAD,WC1COC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b088172.chunk.js","sourcesContent":["import algoliasearch from 'algoliasearch';\nimport { InstantSearch, SearchBox, Hits, Pagination, Panel, RefinementList } from \"react-instantsearch-dom\";\nimport React from 'react';\nimport './App.css';\n\nconst searchClient = algoliasearch('LRNJXNO42B', '25b590194234b396adb5f47435dd483d');\n\nconst index = searchClient.initIndex('talks');\n\nfetch(\n  \"https://raw.githubusercontent.com/algolia/datasets/master/tedtalks/talks.json\"\n)\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (talks) {\n    return index.saveObjects(talks, {\n      autoGenerateObjectIDIfNotExist: true,\n    });\n  });\n\nfunction App() {\n\n  const Hit = ({ hit }) => {\n    return (\n      <div className=\"Hit\">\n        <h3 className=\"Hit-title\">{hit.name}</h3>\n    <p className=\"Hit-speaker\">{hit.speakers[0]}</p>\n        <img className=\"Hit-image\" src={hit.image_url} alt=\"\"/>\n      </div>\n    );\n  };\n\n  return (\n    <InstantSearch searchClient={searchClient} indexName=\"talks\">\n      <h1 id=\"title\"><span>TED</span> Talks</h1>\n      <div className=\"content\">\n        <div className=\"left-panel\">\n          <div id=\"categories\">\n            {<Panel header=\"tags\">\n              <RefinementList\n                attribute=\"tags\"\n              />\n            </Panel>}\n          </div>\n        </div>\n        <div className=\"right-panel\">\n          <div id=\"searchbox\">\n            {<SearchBox translations={{ placeholder: \"Search talks...\" }} />}\n          </div>\n          <div id=\"hits\">\n            {<Hits hitComponent={Hit}/>}\n          </div>\n          <div id=\"pagination\">\n            {<Pagination />}\n          </div>\n        </div>\n      </div>\n    </InstantSearch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}